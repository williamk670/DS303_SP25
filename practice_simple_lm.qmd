---
title: "Practice: Simple Linear Regression"
author: 
  - "William Kim"
  - "DS303, SP25"
  - "Prof. Amber Camp"
date: 1/17/25
format: html
editor: visual
theme: spacelab
---

## Introduction to Simple Linear Regression

This is an introduction to **simple linear regression**, a method used to model the relationship between two variables by fitting a straight line to the data. The goal is to see how one variable (the independent variable) affects another (the dependent variable).

For example, you might predict a student’s test score (dependent variable) based on study hours (independent variable). Simple linear regression helps find a trend or regression line that best fits the data, allowing you to make predictions for varying study hours.

Simple linear regression is useful for studying **cause-and-effect** or **making predictions**, especially when the relationship between the variables is linear. It works best with **continuous data**.

## *y* = *mx* + *b* ?

We talked a lot in class the other day about the basic regression equation. I presented it as:

*y* = *b~0~* + *b~1~x*

Many of you quickly noticed the similarity between *y* = *b~0~* + *b~1~x* and *y* = *mx* + *b.* And you're right–they are both basically the same formula for a straight line. Is there any actual difference at all?

Yes! Despite, again, basically being the same thing, the difference in notation depends on context (when we use the two and how we discuss them). See what you can find online about this, and feel free to discuss with those around you.

### Question 1

What is the difference between *y* = *b~0~* + *b~1~x* and *y* = *mx* + *b*, and when might we use one over the other? Please use your own words

#### Answer:

The equation y = *b~0~* + b1x is typically used in statistics and data science for regression analysis, where b0 represents the intercept and b1​ represents the slope or the effect of x on y. On the other hand, y = mx + b is commonly used in algebra and geometry to represent a straight line, where m is the slope and b is the y-intercept. You would use y = *b~0~* + b1x when analyzing data or modeling relationships, and y = mx + b when graphing or solving basic linear equations.

### Question 2

Think back to our class discussion and your previous studies in math. Tell me below what each part of the equation *y* = *b~0~* + *b~1~x* means. Do this from memory if you can!

#### Answer:

y = dependent variable

x = independent variable

The b0 represents the intercept and b1​ represents the slope or the effect of x on y.

## Let's try it

Let's start by loading the `MASS` and `ISLR2` packages, which are very large collections of data sets and functions. You may need to install `ISLR2` and `lme4`.

```{r, echo = FALSE, message = FALSE}
install.packages("ISLR2")
install.packages("lme4")

library(MASS)
library(ISLR2)
library(lme4)
```

## Boston Housing Data

The `ISLR2` library contains the `Boston` data set, which records `medv` (median house value) for 506 census tracts in Boston. We will seek to predict `medv` using 12 predictors such as `rmvar` (average number of rooms per house), `age` (proportion of owner-occupied units built prior to 1940) and `lstat` (percent of households with low socioeconomic status).

### Question 3

You can just call upon the data (it's already in the package). I'll get you started, but show me below how you'd explore the data even further by adding code in the below code chunk.

```{r}
data("Boston")
head(Boston)
str(Boston)
summary(Boston)

sum(is.na(Boston))
```

We learned in class that we can apply a simple linear regression using `lm`. Here is the basic format:

```{r}
df <- as.data.fr

class(df)
model <- lm(y ~ x, data=df)
```

### Question 4

Use the above basic format to create a linear regression model to predict the **median home value** (medv) based on the **percentage of lower status population** (lstat), using the data from the 'Boston' dataset. Assign it to the variable `lm.model`.

```{r}
lm.model <- lm(medv ~ lstat, data=Boston)

```

If you set it up right, you should be able to run your model name in the below code chunk and view the basic model output. Give it a try:

```{r}
lm.model

```

### Question 5

What is your model output telling you?

#### Answer

(write your answer here)

You can also try `summary(lm.model)`.

```{r}
summary(lm.model)
```

### Question 6

What additional information do you get from this summary of the model output?

#### Answer

The model output provides the estimated coefficients for the regression equation:

y = b0+b1x

where b0​ is the intercept and b1​ is the coefficient for lstat.

This tells us how changes in lstat (percentage of lower-status population) affect medv(median home value). If the coefficient b1​ is negative, it suggests that higher percentages of lower status households are associated with lower median home values.

In order to obtain a confidence interval for the coefficient estimates, we can use the `confint()` command. The `predict()` function can be used to produce confidence intervals and prediction intervals for the prediction of `medv` for a given value of `lstat`. Run these and see if you can figure out what it is telling you.

```{r}
confint(lm.model)

predict(lm.model, data.frame(lstat = (c(5, 10, 15))), interval = "confidence")

predict(lm.model, data.frame(lstat = (c(5, 10, 15))), interval = "prediction")
```

### Question 7

What do you think the above `confint()` and `predict()` information means? It's okay to guess.

#### Answer

The summary function provides:

-   **Coefficients**: Estimates for b0​ and b1, including standard errors and significance levels.

-   **R-squared**: Measures how well the model explains the variability in the dependent variable.

-   **p-value**: Determines if the relationship between medv and lstat is statistically significant.

-   **Residual Standard Error**: Measures how well the model fits the data.

## Visualizing

Here is a simple base R way to plot this data:

```{r}
plot(Boston$lstat, Boston$medv)
abline(lm.model)
```

### Question 8

Can you convert the above code chunk to `ggplot`? Try below. Have fun with editing the appearance of your plot if you'd like :)

```{r}
library(ggplot2)

ggplot(Boston, aes(x = lstat, y = medv)) +
  geom_point(color = "blue", alpha = 0.5) +
  geom_smooth(method = "lm", col = "red") +
  labs(title = "Linear Regression of Median Home Value vs. Lower Status Percentage",
       x = "Lower Status Percentage (lstat)",
       y = "Median Home Value (medv)") +
  theme_minimal()

```

In a future class, we'll explore some diagnostic plots and what that means for evaluating models. For now, just run the below and have a look:

```{r}
par(mfrow = c(2, 2))
plot(lm.model)
```

## Run another model

Now it's your turn to apply a linear regression to other variables from the Boston dataset.

First, view the dataset. Where can you find information about these variables?

```{r}
View(Boston)
```

### Question 9

What variables are you interested in exploring using a linear regression? Just pick and `x` and a `y` and describe your research question below in plain English:

#### Answer

I am interested in exploring the relationship between the average number of rooms per dwelling (rm) and median home value (medv). My research question is:

"Does an increase in the number of rooms in a home lead to higher median home values?"

### Question 10

#### Part 1

Build and run your model, examine the model output:

```{r}
summary(lm.model)
lm.rm <- lm(medv ~ rm, data=Boston)
summary(lm.rm)


```

#### Part 2

Explain what you found in plain English. Do your best.

#### Answer

The regression analysis shows a positive relationship between the number of rooms per dwelling (rm) and the median home value (medv). The coefficient for rm is positive, indicating that as the number of rooms increases, the median home value also tends to rise.

The model’s R-squared value suggests how well rm explains medv. If it is high (e.g., above 0.5), rm is a strong predictor of medv. Additionally, the p-value for rm indicates statistical significance—if it is below 0.05, the relationship is significant.

## The end!

That's it for now. Please feel free to raise questions in class or via email!
